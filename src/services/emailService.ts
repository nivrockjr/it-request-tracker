import { User, ITRequest, RequestStatus } from '../types';
import { format } from 'date-fns';
import kingHostMailService from './kingHostMailService';

// Configura√ß√£o usando suas credenciais espec√≠ficas
const SMTP_CONFIG = {
  host: 'smpt.pqvirk.com.br',
  port: 465,       // Porta SSL/TLS preferencial
  secure: true,    // true para porta 465
  auth: {
    user: '', // Preencha com o novo e-mail
    pass: ''  // Preencha com a nova senha
  }
};

// Email administrativo para envios
const ADMIN_EMAIL = '';

// Fun√ß√£o principal de envio de email usando suas configura√ß√µes
export const sendEmail = async (to: string, subject: string, body: string): Promise<boolean> => {
  console.log(`üìß Enviando email para: ${to}`);
  console.log(`üìã Assunto: ${subject}`);
  
  try {
    // Usar o servi√ßo da KingHost com suas configura√ß√µes
    const result = await kingHostMailService.sendMail({
      to,
      subject,
      html: body,
      from: ADMIN_EMAIL,
      fromName: 'Sistema de TI - PQVIRK'
    });
    
    return result.success;
  } catch (error) {
    console.error('‚ùå Erro ao enviar email:', error);
    return false;
  }
};

// Template para nova solicita√ß√£o (enviado aos administradores)
export const generateNewRequestAlertEmail = (request: ITRequest): { subject: string; body: string } => {
  // Buscar dados do usu√°rio para incluir setor
  const subject = `Solicita√ß√£o do usu√°rio ${request.requesterName} - ${getUserDepartment(request.requesterId)}`;
  
  const body = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">
        Nova Solicita√ß√£o de TI
      </h2>
      
      <p style="font-size: 16px; margin-bottom: 20px;">
        Ol√°, o usu√°rio <strong>${request.requesterName}</strong> (${getUserDepartment(request.requesterId)}) solicita:
      </p>
      
      <div style="background-color: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0;">
        <h3 style="margin-top: 0; color: #374151;">Detalhes da Solicita√ß√£o:</h3>
        <ul style="line-height: 1.6;">
          <li><strong>N√∫mero:</strong> ${request.id}</li>
          <li><strong>Solicitante:</strong> ${request.requesterName}</li>
          <li><strong>Email:</strong> ${request.requesterEmail}</li>
          <li><strong>Setor:</strong> ${getUserDepartment(request.requesterId)}</li>
          <li><strong>Tipo:</strong> ${getRequestTypeText(request.type)}</li>
          <li><strong>Prioridade:</strong> ${getRequestPriorityText(request.priority)}</li>
          <li><strong>Data da Solicita√ß√£o:</strong> ${format(new Date(request.createdAt), 'dd/MM/yyyy HH:mm')}</li>
          <li><strong>Prazo:</strong> ${format(new Date(request.deadlineAt), 'dd/MM/yyyy HH:mm')}</li>
        </ul>
      </div>
      
      <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <h4 style="margin-top: 0; color: #92400e;">Descri√ß√£o:</h4>
        <p style="margin-bottom: 0; white-space: pre-wrap;">${request.description}</p>
      </div>
      
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
        <p style="color: #6b7280; font-size: 14px;">
          Por favor, acesse o sistema para gerenciar esta solicita√ß√£o.<br>
          <strong>Sistema de TI - PQVIRK</strong>
        </p>
      </div>
    </div>
  `;
  
  return { subject, body };
};

// Template para confirma√ß√£o de solicita√ß√£o (enviado ao usu√°rio)
export const generateRequestConfirmationEmail = (request: ITRequest): { subject: string; body: string } => {
  const subject = `Confirma√ß√£o de Solicita√ß√£o - ${request.id}`;
  
  const body = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #059669; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">
        Solicita√ß√£o Recebida
      </h2>
      
      <p>Ol√° <strong>${request.requesterName}</strong>,</p>
      <p>Sua solicita√ß√£o de TI foi recebida com sucesso pelo nosso time.</p>
      
      <div style="background-color: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;">
        <h3 style="margin-top: 0; color: #166534;">Detalhes da Solicita√ß√£o:</h3>
        <ul style="line-height: 1.6;">
          <li><strong>N√∫mero:</strong> ${request.id}</li>
          <li><strong>Tipo:</strong> ${getRequestTypeText(request.type)}</li>
          <li><strong>Prioridade:</strong> ${getRequestPriorityText(request.priority)}</li>
          <li><strong>Data de Cria√ß√£o:</strong> ${format(new Date(request.createdAt), 'dd/MM/yyyy HH:mm')}</li>
          <li><strong>Prazo:</strong> ${format(new Date(request.deadlineAt), 'dd/MM/yyyy HH:mm')}</li>
        </ul>
      </div>
      
      <p>Sua solicita√ß√£o ser√° atendida conforme a prioridade e prazo estabelecidos.</p>
      
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
        <p style="color: #6b7280; font-size: 14px;">
          Atenciosamente,<br>
          <strong>Time de TI - PQVIRK</strong>
        </p>
      </div>
    </div>
  `;
  
  return { subject, body };
};

// Template para atualiza√ß√£o de status (enviado ao usu√°rio)
export const generateStatusUpdateEmail = (request: ITRequest, oldStatus: RequestStatus): { subject: string; body: string } => {
  const subject = `Atualiza√ß√£o de Solicita√ß√£o - ${request.id}`;
  
  const statusUpdateMessage = getStatusUpdateMessage(request.status);
  
  const body = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">
        Atualiza√ß√£o de Solicita√ß√£o
      </h2>
      
      <p>Ol√° <strong>${request.requesterName}</strong>,</p>
      <p>Sua solicita√ß√£o de TI teve uma atualiza√ß√£o de status:</p>
      
      <div style="background-color: #eff6ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
        <h3 style="margin-top: 0; color: #1d4ed8;">Detalhes da Atualiza√ß√£o:</h3>
        <ul style="line-height: 1.6;">
          <li><strong>N√∫mero:</strong> ${request.id}</li>
          <li><strong>Status Anterior:</strong> ${getRequestStatusText(oldStatus)}</li>
          <li><strong>Status Atual:</strong> ${getRequestStatusText(request.status)}</li>
        </ul>
      </div>
      
      <div style="background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 20px 0;">
        <p style="margin: 0; color: #0c4a6e; font-weight: 500;">${statusUpdateMessage}</p>
      </div>
      
      ${request.status === 'resolvida' || request.status === 'fechada' ? `
      <p style="color: #059669; font-weight: 500;">
        ‚úÖ Sua solicita√ß√£o foi finalizada. Caso necess√°rio, voc√™ pode visualizar os detalhes da resolu√ß√£o acessando o sistema.
      </p>
      ` : ''}
      
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
        <p style="color: #6b7280; font-size: 14px;">
          Atenciosamente,<br>
          <strong>Time de TI - PQVIRK</strong>
        </p>
      </div>
    </div>
  `;
  
  return { subject, body };
};

export const generateDeadlineAlertEmail = (request: ITRequest, isOverdue: boolean): { subject: string; body: string } => {
  const subject = isOverdue 
    ? `ALERTA: Solicita√ß√£o ${request.id} - VENCIDA` 
    : `ALERTA: Solicita√ß√£o ${request.id} - Pr√≥xima ao Vencimento`;
  
  const body = `
    <h2>${isOverdue ? 'Solicita√ß√£o Vencida' : 'Solicita√ß√£o Pr√≥xima ao Vencimento'}</h2>
    <p>Ol√° ${request.requesterName},</p>
    <p>${isOverdue 
      ? `Sua solicita√ß√£o de TI <strong>VENCEU</strong> em ${format(new Date(request.deadlineAt), 'dd/MM/yyyy HH:mm')}.` 
      : `Sua solicita√ß√£o de TI est√° pr√≥xima de vencer em ${format(new Date(request.deadlineAt), 'dd/MM/yyyy HH:mm')}.`}
    </p>
    
    <h3>Detalhes da Solicita√ß√£o:</h3>
    <ul>
      <li><strong>N√∫mero:</strong> ${request.id}</li>
      <li><strong>Status:</strong> ${getRequestStatusText(request.status)}</li>
      <li><strong>Tipo:</strong> ${getRequestTypeText(request.type)}</li>
      <li><strong>Prioridade:</strong> ${getRequestPriorityText(request.priority)}</li>
    </ul>
    
    <p>Pedimos que entre em contato com o time de TI para mais informa√ß√µes sobre o andamento da sua solicita√ß√£o.</p>
    
    <p>Atenciosamente,<br>Time de TI</p>
  `;
  
  return { subject, body };
};

export const generateAdminDailyDigestEmail = (pendingRequests: ITRequest[]): { subject: string; body: string } => {
  const now = new Date();
  const isMorning = now.getHours() < 12;
  
  const subject = `Relat√≥rio ${isMorning ? 'Matutino' : 'Vespertino'} de Solicita√ß√µes - ${format(now, 'dd/MM/yyyy')}`;
  
  let requestsTable = '';
  
  if (pendingRequests.length > 0) {
    requestsTable = `
      <table border="1" cellpadding="5" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>N√∫mero</th>
          <th>Solicitante</th>
          <th>Tipo</th>
          <th>Prioridade</th>
          <th>Status</th>
          <th>Prazo</th>
        </tr>
        ${pendingRequests.map(req => `
          <tr>
            <td>${req.id}</td>
            <td>${req.requesterName}</td>
            <td>${getRequestTypeText(req.type)}</td>
            <td>${getRequestPriorityText(req.priority)}</td>
            <td>${getRequestStatusText(req.status)}</td>
            <td>${format(new Date(req.deadlineAt), 'dd/MM/yyyy HH:mm')}</td>
          </tr>
        `).join('')}
      </table>
    `;
  } else {
    requestsTable = '<p>N√£o h√° solicita√ß√µes pendentes no momento.</p>';
  }
  
  const body = `
    <h2>Relat√≥rio ${isMorning ? 'Matutino' : 'Vespertino'} de Solicita√ß√µes</h2>
    <p>Prezado(a) Administrador(a),</p>
    <p>Segue o relat√≥rio de solicita√ß√µes pendentes com seus respectivos prazos:</p>
    
    ${requestsTable}
    
    <p>Atenciosamente,<br>Sistema de Solicita√ß√µes de TI</p>
  `;
  
  return { subject, body };
};

// Helper functions to convert enum values to readable text
const getRequestTypeText = (type: string): string => {
  const typeMap: Record<string, string> = {
    'geral': 'Solicita√ß√£o Geral',
    'sistemas': 'Problemas de Sistema',
    'ajuste_estoque': 'Ajuste de Estoque',
    'solicitacao_equipamento': 'Solicita√ß√£o de Equipamento',
    'manutencao_preventiva': 'Manuten√ß√£o Preventiva',
    'inventory': 'Invent√°rio',
    'system': 'Sistema',
    'emergency': 'Emerg√™ncia',
    'other': 'Outro'
  };
  return typeMap[type] || type;
};

const getRequestPriorityText = (priority: string): string => {
  const priorityMap: Record<string, string> = {
    'baixa': 'üü¢ Baixa',
    'media': 'üü° M√©dia',
    'alta': 'üî¥ Alta',
    'high': 'üî¥ Alta',
    'medium': 'üü° M√©dia',
    'low': 'üü¢ Baixa'
  };
  return priorityMap[priority] || priority;
};

const getRequestStatusText = (status: string): string => {
  const statusMap: Record<string, string> = {
    'nova': 'üìã Nova',
    'atribuida': 'üë§ Atribu√≠da',
    'em_andamento': '‚öôÔ∏è Em Andamento',
    'resolvida': '‚úÖ Resolvida',
    'fechada': 'üèÅ Fechada',
    'new': 'üìã Nova',
    'assigned': 'üë§ Atribu√≠da',
    'in_progress': '‚öôÔ∏è Em Andamento',
    'resolved': '‚úÖ Resolvida',
    'closed': 'üèÅ Fechada'
  };
  return statusMap[status] || status;
};

const getStatusUpdateMessage = (status: string): string => {
  const messages: Record<string, string> = {
    'nova': 'Sua solicita√ß√£o foi registrada e aguarda atribui√ß√£o.',
    'atribuida': 'Sua solicita√ß√£o foi atribu√≠da a um t√©cnico e ser√° iniciada em breve.',
    'em_andamento': 'Nossa equipe est√° trabalhando na resolu√ß√£o da sua solicita√ß√£o.',
    'resolvida': 'Sua solicita√ß√£o foi resolvida com sucesso!',
    'fechada': 'Sua solicita√ß√£o foi finalizada e arquivada.'
  };
  return messages[status] || 'Status da sua solicita√ß√£o foi atualizado.';
};

const getUserDepartment = (userId: string): string => {
  // Buscar dados do usu√°rio - implementar conforme necess√°rio
  // Por enquanto, retornar valor padr√£o
  return 'Setor n√£o informado';
};
